{"version":3,"sources":["comps/Nav.js","comps/TechIcons.js","comps/Home.js","comps/About.js","comps/Experience.js","comps/Projects.js","ApplicationViews.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","reactstrap_es","color","dark","light","expand","href","onClick","navbar","className","exact","to","tag","RRNavLink","activeClassName","Component","TechIcons","src","alt","React","Home","TechIcons_TechIcons","Experience","Projects","ApplicationViews","isAuthenticated","localStorage","getItem","Fragment","Route","path","render","comps_Home","About_NavBar","Experience_Experience","Projects_Projects","App","Nav_NavBar","ApplicationViews_ApplicationViews","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f2d34f4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from \"reactstrap\";\r\nimport { NavLink as RRNavLink } from \"react-router-dom\";\r\n\r\nexport default class NavBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"dark\" dark light expand=\"md\">\r\n          <NavbarBrand href=\"/\">Phil Patton</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink exact to=\"/\" tag={RRNavLink}>\r\n                  Home\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"/about\" activeClassName=\"active\" tag={RRNavLink}>\r\n                  About\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  to=\"/experience\"\r\n                  activeClassName=\"active\"\r\n                  tag={RRNavLink}\r\n                >\r\n                  Experience\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  to=\"/projects\"\r\n                  activeClassName=\"active\"\r\n                  tag={RRNavLink}\r\n                >\r\n                  Projects\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\nexport default class TechIcons extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container className=\"container-fluid techLogoSVG\">\r\n        <Row>\r\n          <Col>\r\n            <img src=\"./img/dotnet.svg\" alt=\"dotnet logo\" />\r\n          </Col>\r\n          <Col>\r\n            <img src=\"./img/bootstrap.svg\" alt=\"bootrasp logo\" />\r\n          </Col>\r\n          <Col>\r\n            <img src=\"./img/C_Sharp.svg\" alt=\"C Sharp logo\" />\r\n          </Col>\r\n          <Col>\r\n            <img src=\"./img/css-3.svg\" alt=\"CSS logo\" />\r\n          </Col>\r\n          <Col>\r\n            <img src=\"./img/git-icon.svg\" alt=\"git logo\" />\r\n          </Col>\r\n          <Col>\r\n            <img src=\"./img/github-icon.svg\" alt=\"github logo\" />\r\n          </Col>\r\n          <Col>\r\n            <img src=\"./img/grunt.svg\" alt=\"gru t logo\" />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <img src=\"./img/html-5.svg\" alt=\"html logo\" />\r\n          </Col>\r\n          <Col>\r\n            <img src=\"./img/javascript.svg\" alt=\"javascript logo\" />\r\n          </Col>\r\n\r\n          <Col>\r\n            <img src=\"./img/jquery.svg\" alt=\"jquery logo\" />\r\n          </Col>\r\n          <Col>\r\n            <img\r\n              src=\"./img/microsoft-sql-server.svg\"\r\n              alt=\"microsoft-sql-server logo\"\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <img src=\"./img/npm.svg\" alt=\"npm logo\" />\r\n          </Col>\r\n          <Col>\r\n            <img src=\"./img/react.svg\" alt=\"react logo\" />\r\n          </Col>\r\n          <Col>\r\n            <img src=\"./img/browserify-icon.svg\" alt=\"browserify logo\" />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Jumbotron } from \"reactstrap\";\r\nimport TechIcons from \"./TechIcons\";\r\n\r\nconst Home = props => {\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1 className=\"display-3\">Philip Patton</h1>\r\n        <p className=\"lead\">Full Stack Software Developer</p>\r\n        <hr className=\"my-2\" />\r\n        <p>Site is under Construction</p>\r\n      </Jumbotron>\r\n      <TechIcons />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class NavBar extends Component {\r\n  render() {\r\n    return <h1>About</h1>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Experience extends Component {\r\n  render() {\r\n    return <h1>Experience</h1>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Projects extends Component {\r\n  render() {\r\n    return <h1>Projects</h1>;\r\n  }\r\n}\r\n","import { Route } from \"react-router-dom\";\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Home from \"./comps/Home\";\r\nimport About from \"./comps/About\";\r\nimport Experience from \"./comps/Experience\";\r\nimport Projects from \"./comps/Projects\";\r\n\r\nexport default class ApplicationViews extends Component {\r\n  // Check if credentials are in local storage\r\n  isAuthenticated = () => localStorage.getItem(\"credentials\") !== null;\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={props => {\r\n            return <Home />;\r\n          }}\r\n        />\r\n        <Route\r\n          path=\"/about\"\r\n          render={props => {\r\n            return <About />;\r\n          }}\r\n        />\r\n        <Route\r\n          path=\"/experience\"\r\n          render={props => {\r\n            return <Experience />;\r\n          }}\r\n        />\r\n        <Route\r\n          path=\"/projects\"\r\n          render={props => {\r\n            return <Projects />;\r\n          }}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Nav from \"./comps/Nav\";\nimport ApplicationViews from \"./ApplicationViews\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Nav />\n        <ApplicationViews />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// import $ from \"jquery\";\n// import Popper from \"popper.js\";\n// import \"bootstrap/dist/js/bootstrap.bundle.min\";\n// import registerServiceWorker from \"registerServiceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}